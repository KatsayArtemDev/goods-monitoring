import { Composer, InlineKeyboard, InputFile } from 'grammy';
import {
    GOOD_LIMIT_REACHED_TEMPLATE,
    GOODS_KEYBOARD_TEMPLATE,
    HOME_KEYBOARD_TEMPLATE,
    SUBSCRIBE_KEYBOARD_TEMPLATE,
} from '../reply-markup/templates.js';
import {
    ADD_KEYBOARD,
    ADDITIONAL_KEYBOARD,
} from '../reply-markup/keyboards.js';
import {
    ADD_GOOD_INLINE_KEYBOARD,
    BUY_INLINE_KEYBOARD,
    GOODS_REMOVE_INLINE_KEYBOARD,
    GOODS_REMOVE_WITH_DETAILS_INLINE_KEYBOARD,
    REFERRAL_INLINE_KEYBOARD,
} from '../reply-markup/inline-keyboards.js';
import { MainContext } from '../../init.js';
import {
    selectReferralLink,
    userSubscription,
} from '../../controllers/users.js';
import {
    REFERRAL_FIRST_PART,
    REFERRAL_SECOND_PART,
} from '../templates/referral.js';
import {
    ADD_KEYBOARD_MESSAGE,
    ADD_SECTION_KEYBOARD_MESSAGE,
    ADDITIONAL_KEYBOARD_MESSAGE,
} from '../templates/keyboard/home.js';
import handleError from './error.js';
import { formatTime } from '../../libs/formatting.js';
import { FirstGoodData, NewGoodData } from '../../models/good.js';
import { countAvailableUrls, selectAllGoods } from '../../controllers/goods.js';
import {
    selectFirstGoodsData,
    selectNewGoodsData,
} from '../../controllers/goods-data.js';
import { NO_GOODS, WAITING_UNTIL_NEXT_CALL } from '../templates/goods.js';
import logger from '../../logger.js';
import { priceLineCheckGood } from '../../libs/price-line.js';
import { BonusName } from '../../models/promotional-code.js';
import timeframe from '../../libs/converts/timeframe.js';
import convertTimeframe from '../../libs/converts/timeframe.js';
import convertPaymentPeriodsLevel from '../../libs/converts/payment-periods-level.js';

interface GoodsMessages {
    user_id: string;
    url_id: string;
    platform: string;
    url: string;
    created_at: Date;
    check_in: Date;
    updated_at: Date;
    first: FirstGoodData;
    new: NewGoodData;
}

async function sendGoodsMessages(
    ctx: MainContext,
    mergedGoodsData: GoodsMessages[],
    userId: number,
) {
    for (const good of mergedGoodsData) {
        const response = `
üìã <b>${good.new.name}</b>

<u>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ</u>
${priceLineCheckGood(good.first.sale_price, good.new.sale_price, good.created_at, Boolean(good.new.screenshot))}
‚îú ‚åõÔ∏èÔ∏è –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π: ${formatTime(good.updated_at)}
‚îî üîéÔ∏è –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π: ${formatTime(good.check_in)}

üåê <a href="${good.url}">–°—Å—ã–ª–∫–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ ${good.platform}</a>
`;

        const newGoodDataPhoto = new InputFile(
            good.new.screenshot || good.first.screenshot,
        );

        let keyboard: InlineKeyboard;
        if (good.new.screenshot) {
            keyboard = GOODS_REMOVE_WITH_DETAILS_INLINE_KEYBOARD;
        } else {
            keyboard = GOODS_REMOVE_INLINE_KEYBOARD;
        }

        await ctx.replyWithPhoto(newGoodDataPhoto, {
            caption: response,
            reply_markup: keyboard,
        });
    }

    const availableUrlsNum = await countAvailableUrls(userId);
    if (!availableUrlsNum && availableUrlsNum !== 0) {
        return;
    }

    // TODO: add text 114 line and activate keyboard after adding subscription
    // –¢–∞–∫–∂–µ –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫. –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å? –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–µ–±—è –≤—ã–±—Ä–∞–≤ –Ω—É–∂–Ω–æ–µ! üòâ

    if (availableUrlsNum === 0) {
        await ctx.reply(
            `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "${GOODS_KEYBOARD_TEMPLATE.remove}" –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ–≥–¥–∞ —É –í–∞—Å –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Å—Å—ã–ª–æ–∫`,
            // { reply_markup: UPDATE_SUBSCRIPTION_INLINE_KEYBOARD },
        );
        return;
    }

    await ctx.reply(`üëâ <b> –ß–∏—Å–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${availableUrlsNum}</b>`, {
        reply_markup: ADD_GOOD_INLINE_KEYBOARD,
    });
}

async function handleSendingMessages(
    ctx: MainContext,
    mergedGoodsData: GoodsMessages[],
    userId: number,
) {
    try {
        await sendGoodsMessages(ctx, mergedGoodsData, userId);
    } catch (error) {
        logger.error('sending goods messages: ' + error);
    }
}

async function sendAllGoodsData(ctx: MainContext) {
    if (!ctx.from) return;

    const userId = ctx.from.id;
    const goods = await selectAllGoods(userId);
    if (!goods) {
        await handleError(ctx);
        return;
    }

    if (goods.length === 0) {
        await ctx.reply(NO_GOODS, {
            reply_markup: ADD_GOOD_INLINE_KEYBOARD,
        });
        return;
    }

    const customSession = ctx.session;
    const currentTime = new Date().getTime();
    const timeDiff = currentTime - customSession.timeUntilNextGettingAllGoods;

    const pause = 30000;
    if (timeDiff < pause) {
        const totalSeconds = Math.floor((pause - timeDiff) / 1000);
        const seconds = totalSeconds % 60;

        await ctx.reply(WAITING_UNTIL_NEXT_CALL + seconds);
        return;
    }

    customSession.timeUntilNextGettingAllGoods = currentTime;

    const allUrlIds = goods.map((good) => good.url_id);

    const firstGoodsData = await selectFirstGoodsData(allUrlIds);
    if (!firstGoodsData) {
        await handleError(ctx);
        return;
    }

    const newGoodsData = await selectNewGoodsData(allUrlIds);
    if (!newGoodsData) {
        await handleError(ctx);
        return;
    }

    const mergedGoodsData = goods.map((good) => {
        const firstGoodData = firstGoodsData.find(
            (reqGoodData) => good.url_id === reqGoodData.url_id,
        );

        const newGoodData = newGoodsData.find(
            (reqGoodData) => good.url_id === reqGoodData.url_id,
        );

        return { ...good, first: firstGoodData!, new: newGoodData! };
    });

    void handleSendingMessages(ctx, mergedGoodsData, userId);
}

export const home = new Composer<MainContext>();

const { goods, add, subscribe, additional, referral } = HOME_KEYBOARD_TEMPLATE;

home.hears(goods, async (ctx) => await sendAllGoodsData(ctx));

home.callbackQuery(GOOD_LIMIT_REACHED_TEMPLATE.edit, async (ctx) => {
    await ctx.answerCallbackQuery(
        '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    );

    await ctx.editMessageReplyMarkup(undefined);

    await sendAllGoodsData(ctx);
});

const { moreAboutSubscribe } = SUBSCRIBE_KEYBOARD_TEMPLATE;

function bonusUpdate(bonusName: BonusName, bonus: string) {
    let updBonus = '';
    switch (bonusName) {
        case 'discount':
            updBonus = `—Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É ${bonus}%`;
            break;
        case 'urls':
            updBonus = `—Å—Å—ã–ª–∫–∏ +${bonus}`;
            break;
        case 'timeframe':
            updBonus = '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ ' + timeframe(bonus);
    }

    return updBonus;
}

async function sendUserSubscribeData(ctx: MainContext) {
    if (!ctx.from) return;
    const userId = ctx.from.id;

    // TODO: inline key upgrade subscription

    const subscription = await userSubscription(userId);
    if (!subscription) {
        await handleError(ctx);
        return;
    }

    const {
        discount,
        timeframe,
        urls_limit,
        goods_count,
        subscription_name,
        payment_periods_level,
        price,
        end_timestamp,
        activePromotionalCodes,
    } = subscription;

    const availableLinksNumber = urls_limit - Number(goods_count);

    let response = `
üëë –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: <b>${subscription_name}</b>

üëÄ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: <b>${convertTimeframe(timeframe)}</b>

üìé –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: <b>${urls_limit}</b>
‚îú –ß–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: <b>${goods_count}</b>
‚îî –î–æ—Å—É—Ç–Ω–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: <b>${availableLinksNumber}</b>
`;

    if (price && payment_periods_level && end_timestamp) {
        const options: Intl.DateTimeFormatOptions = {
            month: 'long',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
        };

        const endFormattedTime = formatTime(end_timestamp, options);

        response += `
‚ö°Ô∏è –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${price}‚ÇΩ
‚îú ‚è≥ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã: ${convertPaymentPeriodsLevel(payment_periods_level)}
‚îî üëë –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã: ${endFormattedTime}
`;
    }

    if (discount) {
        response += `\nüéâ –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É <b>${discount}</b>%\n`;
    }

    if (activePromotionalCodes.length === 0) {
        response += '\nüéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç\n';
    } else {
        const currentYear = new Date().getFullYear();
        for (const activePromotionalCode of activePromotionalCodes) {
            const { promotional_code, bonus_name, bonus, ended_at } =
                activePromotionalCode;

            let formatEndedAt = formatTime(ended_at, {
                month: 'long',
                day: 'numeric',
            });

            const year = ended_at.getFullYear();
            if (year - currentYear > 365) {
                formatEndedAt += ` ${year} –≥–æ–¥–∞`;
            }

            const updBonus = bonusUpdate(bonus_name, bonus);
            response += `\nüéÅ –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promotional_code}\n‚îú –ë–æ–Ω—É—Å –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É: ${updBonus}\n‚îî –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ ${formatEndedAt}\n`;
        }
    }

    await ctx.reply(response, {
        reply_markup: BUY_INLINE_KEYBOARD,
    });
}

home.hears(subscribe, async (ctx) => await sendUserSubscribeData(ctx));

home.callbackQuery(moreAboutSubscribe, async (ctx) => {
    await ctx.answerCallbackQuery('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ');

    await sendUserSubscribeData(ctx);
});

home.hears(add, async (ctx) => {
    if (!ctx.from) return;

    await ctx.reply(ADD_SECTION_KEYBOARD_MESSAGE, {
        reply_markup: ADD_KEYBOARD,
    });

    await ctx.reply(ADD_KEYBOARD_MESSAGE, {
        reply_markup: ADD_KEYBOARD,
        link_preview_options: {
            is_disabled: true,
        },
    });
});

// home.hears(subscribe, async (ctx) => {
//     if (!ctx.from) return;
//
//     await ctx.reply(SUBSCRIBE_KEYBOARD_MESSAGE, {
//         reply_markup: SUBSCRIBE_KEYBOARD,
//     });
// });

home.hears(additional, async (ctx) => {
    if (!ctx.from) return;

    await ctx.reply(ADDITIONAL_KEYBOARD_MESSAGE, {
        reply_markup: ADDITIONAL_KEYBOARD,
    });
});

home.hears(referral, async (ctx) => {
    if (!ctx.from) return;

    const referralLink = await selectReferralLink(ctx.from.id);

    const url = `https://t.me/${process.env.BOT_USERNAME}?start=${referralLink}`;

    const response =
        REFERRAL_FIRST_PART +
        `<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b> <code>${url}</code>` +
        REFERRAL_SECOND_PART;

    await ctx.reply(response, {
        reply_markup: REFERRAL_INLINE_KEYBOARD,
    });
});
